{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","data","city","country","temp","Math","round","humedity","desc","error","API_KEY","App","state","e","a","preventDefault","target","elements","value","fetch","api","json","setState","sys","main","humidity","weather","description","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAACC,GACV,OACI,8BACI,uBAAMC,SAAUD,EAAME,WAAtB,UACI,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,uBAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,uDCoBDC,EA1BC,SAACN,GACb,OACI,sBAAKO,UAAU,OAAf,UAEQP,EAAMQ,KAAKC,MACX,oBAAGF,UAAU,WAAb,qBAAgC,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMQ,KAAKC,KAA1C,QAAhC,OAGAT,EAAMQ,KAAKE,SAAW,oBAAGH,UAAU,WAAb,wBAAmC,uBAAMA,UAAU,aAAhB,iBAAkCP,EAAMQ,KAAKE,QAA7C,OAAnC,OAGtBV,EAAMQ,KAAKG,MAAQ,oBAAGJ,UAAU,WAAb,4BAAuC,uBAAMA,UAAU,aAAhB,iBAAkCK,KAAKC,MAAMb,EAAMQ,KAAKG,KAAM,QAA9D,OAAvC,OAGnBX,EAAMQ,KAAKM,UAAY,oBAAGP,UAAU,WAAb,yBAAoC,uBAAMA,UAAU,aAAhB,iBAAkCP,EAAMQ,KAAKM,SAA7C,OAApC,OAGvBd,EAAMQ,KAAKO,MAAQ,oBAAGR,UAAU,WAAb,4BAAuC,uBAAMA,UAAU,aAAhB,iBAAkCP,EAAMQ,KAAKO,KAA7C,OAAvC,OAGnBf,EAAMQ,KAAKQ,OAAS,oBAAGT,UAAU,WAAb,sBAAiC,uBAAMA,UAAU,aAAhB,eAAgCP,EAAMQ,KAAKQ,MAA3C,OAAjC,YClB9BC,EAAU,mCAGKC,E,4MAEnBC,MAAQ,CAENV,KAAM,GACNC,QAAS,GACTC,KAAM,GACNG,SAAU,GACVC,KAAM,GACNC,MAAO,I,EAGTd,W,uCAAa,WAAOkB,GAAP,qBAAAC,EAAA,yDACXD,EAAEE,iBACIb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,MAC9Bf,EAAUU,EAAEG,OAAOC,SAASd,QAAQe,OAGtChB,IAAQC,EAND,iCAQSgB,MAAM,oDAAD,OAAqDjB,EAArD,cAA+DC,EAA/D,kBAAgFO,IAR9F,cAQHU,EARG,gBASUA,EAAIC,OATd,QASHpB,EATG,QAWAJ,KACP,EAAKyB,SAAS,CAEZpB,KAAMD,EAAKJ,KACXM,QAASF,EAAKsB,IAAIpB,QAClBC,KAAMH,EAAKuB,KAAKpB,KAChBG,SAAUN,EAAKuB,KAAKC,SACpBjB,KAAMP,EAAKyB,QAAQ,GAAGC,YACtBlB,MAAO,KAGT,EAAKa,SAAS,CACZpB,KAAM,GACNC,QAAS,GACTC,KAAM,GACNG,SAAU,GACVC,KAAM,GACNC,MAAO,gCA5BF,wBAkCT,EAAKa,SAAS,CACZpB,KAAM,GACNC,QAAS,GACTC,KAAM,GACNG,SAAU,GACVC,KAAM,GACNC,MAAO,gCAxCA,4C,kGA4Cb,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,sBAAKA,UAAU,OAAf,UACE,cAAC,EAAD,CAAML,WAAYiC,KAAKjC,aACvB,cAAC,EAAD,CAASM,KAAM2B,KAAKhB,iB,GA7DGiB,aCKlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9b0dbb28.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.getWeather} >\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n                <button>Get Weather</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"info\">\r\n            {               \r\n                props.data.city && \r\n                <p className=\"info-key\"> City : <span className=\"info-value\"> {props.data.city}  </span> </p>\r\n            }\r\n            {\r\n                props.data.country && <p className=\"info-key\"> Country : <span className=\"info-value\">    {props.data.country} </span> </p>\r\n            }\r\n            {\r\n                props.data.temp && <p className=\"info-key\"> Temperature : <span className=\"info-value\">    {Math.round(props.data.temp -273.15)} </span> </p>\r\n            }\r\n            {\r\n                props.data.humedity && <p className=\"info-key\"> Humedity : <span className=\"info-value\">    {props.data.humedity} </span> </p>\r\n            }\r\n            {\r\n                props.data.desc && <p className=\"info-key\"> Description : <span className=\"info-value\">    {props.data.desc} </span> </p>\r\n            }\r\n            {\r\n                props.data.error && <p className=\"info-key\"> Error : <span className=\"info-value\">  {props.data.error} </span>  </p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather","import React, { Component } from 'react'\nimport Form from \"./components/Form\"\nimport Weather from \"./components/Weather\"\n\nconst API_KEY = \"e36ed364400282e43250b6c4c0274d44\";\n// API link\n// http://api.openweathermap.org/data/2.5/weather?q=cairo%2Cegypt&appid=e36ed364400282e43250b6c4c0274d44\nexport default class App extends Component {\n\n  state = {\n\n    city: '',\n    country: '',\n    temp: '',\n    humedity: '',\n    desc: '',\n    error: ''\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n\n    if (city && country) {\n\n      const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}%2C${country}&appid=${API_KEY}`)\n      const data = await api.json();\n\n      if (data.name) {\n        this.setState({\n\n          city: data.name,\n          country: data.sys.country,\n          temp: data.main.temp,\n          humedity: data.main.humidity,\n          desc: data.weather[0].description,\n          error: ''\n        })\n      } else {\n        this.setState({\n          city: '',\n          country: '',\n          temp: '',\n          humedity: '',\n          desc: '',\n          error: 'Please check the input data'\n        })\n      }\n\n    } else {\n\n      this.setState({\n        city: '',\n        country: '',\n        temp: '',\n        humedity: '',\n        desc: '',\n        error: 'Please check the input data'\n      })\n    }    \n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"form\">\n          <Form getWeather={this.getWeather} />\n          <Weather data={this.state} />\n        </div>\n        \n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}